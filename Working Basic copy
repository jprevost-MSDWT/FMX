function CopyColumns_1H() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const inputSheet = ss.getSheetByName("Input");
  const outputSheet = ss.getSheetByName("Output");

  const inputData = inputSheet.getDataRange().getValues();
  const inputHeaders = inputData[0]; // Access the first row (index 0) for headers

  // Find the column indexes of all required columns
  const nameCol = inputHeaders.indexOf("Name");
  const buildingsCol = inputHeaders.indexOf("Buildings");
  const statusCol = inputHeaders.indexOf("Status");
  const resourcesCol = inputHeaders.indexOf("Resources");
  const doorNotesCol = inputHeaders.indexOf("Previous CMMS Door Notes");
  const unlockTimeCol = inputHeaders.indexOf("Unlock Time");
  const lockTimeCol = inputHeaders.indexOf("Lock Time");
  const unlockTimeDotCol = inputHeaders.indexOf("Unlock Time.");
  const lockTimeDotCol = inputHeaders.indexOf("Lock Time.");
  const unlockTimeDotDotCol = inputHeaders.indexOf("Unlock Time..");
  const lockTimeDotDotCol = inputHeaders.indexOf("Lock Time..");
  const unlockTimeDotDotDotCol = inputHeaders.indexOf("Unlock Time...");
  const lockTimeDotDotDotCol = inputHeaders.indexOf("Lock Time...");
  const unlockTimeDotDotDotDotCol = inputHeaders.indexOf("Unlock Time....");
  const lockTimeDotDotDotDotCol = inputHeaders.indexOf("Lock Time....");
  const lockTimeDotDotDotDotDotCol = inputHeaders.indexOf("Lock Time.....");
  const unlockTimeDotDotDotDotDotCol = inputHeaders.indexOf("Unlock Time.....");


  // Define the list of "Doors" input columns to combine for "Doors1"
  const doorColumns1 = [
    'Clinic Doors', 'BV Doors', 'CR Doors', 'ECC Doors', 'EA Doors',
    'EdCtr Doors', 'GC Doors', 'HA Doors', 'HP Doors', 'LO Doors',
    'LP Doors', 'LA Doors', 'MO Doors', 'SH Doors', 'PO Doors',
    'SB Doors', 'RP Doors', 'REN Doors', 'WCHS Doors'
  ];

  // Define the list of "Doors" input columns to combine for "Doors2"
  const doorColumns2 = [
    'EA Doors.', 'BV Doors.', 'CR Doors.', 'ECC Doors.', 'GC Doors.',
    'HA Doors.', 'HP Doors.', 'LO Doors.', 'LA Doors.', 'LP Doors.',
    'MO Doors.', 'PO Doors.', 'PR Doors.', 'REN Doors.', 'RP Doors.',
    'SB Doors.', 'SH Door.', 'WCHS Doors.'
  ];

  // Get the indexes for each of the door columns for Doors1
  const doorColIndexes1 = {};
  for (const doorName of doorColumns1) {
    doorColIndexes1[doorName] = inputHeaders.indexOf(doorName);
    // Add error handling if a column is not found
    if (doorColIndexes1[doorName] === -1) Logger.log(`Warning: Column "${doorName}" not found for Doors1.`);
  }

  // Get the indexes for each of the door columns for Doors2
  const doorColIndexes2 = {};
  for (const doorName of doorColumns2) {
    doorColIndexes2[doorName] = inputHeaders.indexOf(doorName);
    // Add error handling if a column is not found
    if (doorColIndexes2[doorName] === -1) Logger.log(`Warning: Column "${doorName}" not found for Doors2.`);
  }

  // Create a 2D array to store the processed data (including headers)
  const outputData = [
    [
      "ID",
      "Name",
      "Buildings",
      "Status",
      "Resources",
      "Previous CMMS Door Notes",
      "Unlock Time",
      "Lock Time",
      "Unlock Time.",
      "Lock Time.",
      "Unlock Time..",
      "Lock Time..",
      "Unlock Time...",
      "Lock Time...",
      "Unlock Time....",
      "Lock Time....",
      "Lock Time.....",
      "Unlock Time.....",
      "Doors1",
      "Doors2", // New combined column
    ],
  ];

  // Use a Set to store unique row signatures (excluding the ID)
  const seenRows = new Set();

  // Iterate through the input data (starting from the second row to skip headers)
  for (let i = 1; i < inputData.length; i++) { // Loop starts from index 1 to skip the header row
    const row = inputData[i];

    let name = row[nameCol];
    let id = "";

    if (typeof name === 'string' && name.includes("-")) {
      const splitName = name.split("-");
      id = splitName; // CORRECTED: Access the first element of the array
      name = splitName.slice(1).join("-").trim();
    } else if (typeof name === 'string') {
        id = name.trim();
        name = "";
    }

    const buildings = row[buildingsCol];
    const status = row[statusCol];
    let resources = row[resourcesCol];
    let doorNotes = row[doorNotesCol];
    let unlockTime = row[unlockTimeCol];
    let lockTime = row[lockTimeCol];
    let unlockTimeDot = row[unlockTimeDotCol];
    let lockTimeDot = row[lockTimeDotCol];
    let unlockTimeDotDot = row[unlockTimeDotDotCol];
    let lockTimeDotDot = row[lockTimeDotDotCol];
    let unlockTimeDotDotDot = row[unlockTimeDotDotDotCol];
    let lockTimeDotDotDot = row[lockTimeDotDotDotCol];
    const unlockTimeDotDotDotDot = row[unlockTimeDotDotDotDotCol];
    const lockTimeDotDotDotDot = row[lockTimeDotDotDotDotCol];
    const lockTimeDotDotDotDotDot = row[lockTimeDotDotDotDotDotCol];
    const unlockTimeDotDotDotDotDot = row[unlockTimeDotDotDotDotDotCol];


    // --- Combine "Doors" columns into "Doors1" ---
    const currentDoors1 = [];
    for (const doorName of doorColumns1) {
      const colIndex = doorColIndexes1[doorName];
      if (colIndex !== -1 && row[colIndex] !== "" && row[colIndex] !== undefined) {
        currentDoors1.push(row[colIndex]);
      }
    }
    const doors1 = currentDoors1.join(", "); // Combine non-empty values with ", "
    // --- End combine "Doors" columns for Doors1 ---

    // --- Combine "Doors" columns into "Doors2" ---
    const currentDoors2 = [];
    for (const doorName of doorColumns2) {
      const colIndex = doorColIndexes2[doorName];
      if (colIndex !== -1 && row[colIndex] !== "" && row[colIndex] !== undefined) {
        currentDoors2.push(row[colIndex]);
      }
    }
    const doors2 = currentDoors2.join(", "); // Combine non-empty values with ", "
    // --- End combine "Doors" columns for Doors2 ---


    // Remove line breaks from columns where applicable
    if (typeof resources === 'string') {
      resources = resources.replace(/(\r\n|\n|\r)/gm, " ");
    }
    if (typeof doorNotes === 'string') {
      doorNotes = doorNotes.replace(/(\r\n|\n|\r)/gm, " ");
    }


    // Create a unique key for the row, ignoring the ID column but including the new columns
    const rowKey = `${name}|${buildings}|${status}|${resources}|${doorNotes}|${unlockTime}|${lockTime}|${unlockTimeDot}|${lockTimeDot}|${unlockTimeDotDot}|${lockTimeDotDot}|${unlockTimeDotDotDot}|${lockTimeDotDotDot}|${unlockTimeDotDotDotDot}|${lockTimeDotDotDotDot}|${lockTimeDotDotDotDotDot}|${unlockTimeDotDotDotDotDot}|${doors1}|${doors2}`;


    if (!seenRows.has(rowKey)) {
      seenRows.add(rowKey);

      // Add the processed row to the output data array
      outputData.push([
        id,
        name,
        buildings,
        status,
        resources,
        doorNotes,
        unlockTime,
        lockTime,
        unlockTimeDot,
        lockTimeDot,
        unlockTimeDotDot,
        lockTimeDotDot,
        unlockTimeDotDotDot,
        lockTimeDotDotDot,
        unlockTimeDotDotDotDot,
        lockTimeDotDotDotDot,
        lockTimeDotDotDotDotDot,
        unlockTimeDotDotDotDotDot,
        doors1,
        doors2, // Add the combined doors value
      ]);
    }
  }

  // Clear existing content in the Output sheet (except for the header row)
  outputSheet.getRange(2, 1, outputSheet.getLastRow() || 2, outputSheet.getLastColumn() || outputData[0].length).clearContent(); // Corrected column count in clearContent

  // Write all the processed data to the Output sheet in one operation
  outputSheet.getRange(1, 1, outputData.length, outputData[0].length).setValues(outputData); // Corrected column count in getRange

  // SpreadsheetApp.getUi().alert('Data copied, split, and duplicates removed (batch operation)!'); // Commented out
}
